"""
jupyterhub_config.py-docker
---------------------------

Configuration for JupyterHub tutorial - used for docker deployment
"""

# SSL and hub port
c.JupyterHub.ssl_key = '/etc/letsencrypt/live/hub-tutorial.jupyter.org/privkey.pem'
c.JupyterHub.ssl_cert = '/etc/letsencrypt/live/hub-tutorial.jupyter.org/fullchain.pem'
c.JupyterHub.port = 443

# User whitelist - set of users allowed to use the Hub
c.Authenticator.whitelist = {'minrk', 'takluyver'}

# Administrators - set of users who can administer the Hub itself
c.Authenticator.admin_users = {'minrk'}

# Authenticator
from oauthenticator.github import GitHubOAuthenticator
c.JupyterHub.authenticator_class = GitHubOAuthenticator

# Spawner
from dockerspawner import DockerSpawner
c.JupyterHub.spawner_class = DockerSpawner

# Hub IP and port
#
# By default, the Hub's API listens on localhost.
# Yet, a docker container can't see the Hub's localhost.
# Set the Hub's IP address to the docker0 address and
# tell the Hub to listen on its docker network.
# netifaces is a convenience library to gather IP information.
import netifaces
import platform
if platform.system() == 'Darwin':
  lo0 = netifaces.ifaddresses('lo0')
  try:
    docker0_ipv4 = lo0[netifaces.AF_INET][1]
  except IndexError:
    raise Exception(("OSX hosts must add an additional IP to the loopback interface that the Docker container can access, "
                     "e.g. 'sudo ifconfig lo0 alias 10.200.10.1/24'"))
else:
  docker0 = netifaces.ifaddresses('docker0')
  docker0_ipv4 = docker0[netifaces.AF_INET][0]
c.JupyterHub.hub_ip = docker0_ipv4['addr']
